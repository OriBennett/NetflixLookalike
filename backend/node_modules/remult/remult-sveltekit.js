"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.remultSveltekit = void 0;
var tslib_1 = require("tslib");
var index_js_1 = require("./server/index.js");
function remultSveltekit(options) {
    var _this = this;
    var result = (0, index_js_1.createRemultServer)(options, {
        buildGenericRequestInfo: function (event) { return ({
            url: event.request.url,
            method: event.request.method,
            on: function (e, do1) {
                if (e === 'close') {
                    event.locals['_tempOnClose'] = do1;
                }
            },
        }); },
        getRequestBody: function (event) { return event.request.json(); },
    });
    var handler = function (_a) {
        var event = _a.event, resolve = _a.resolve;
        return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var sseResponse_1, response_1, responseFromRemultHandler;
            var _this = this;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!event.url.pathname.startsWith(options.rootPath)) return [3 /*break*/, 2];
                        sseResponse_1 = undefined;
                        event.locals['_tempOnClose'] = function () { };
                        response_1 = {
                            end: function () { },
                            json: function () { },
                            status: function () {
                                return response_1;
                            },
                            write: function () { },
                            writeHead: function (status, headers) {
                                if (status === 200 && headers) {
                                    var contentType = headers['Content-Type'];
                                    if (contentType === 'text/event-stream') {
                                        var messages_1 = [];
                                        response_1.write = function (x) { return messages_1.push(x); };
                                        var stream = new ReadableStream({
                                            start: function (controller) {
                                                var e_1, _a;
                                                try {
                                                    for (var messages_2 = tslib_1.__values(messages_1), messages_2_1 = messages_2.next(); !messages_2_1.done; messages_2_1 = messages_2.next()) {
                                                        var message = messages_2_1.value;
                                                        controller.enqueue(message);
                                                    }
                                                }
                                                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                                                finally {
                                                    try {
                                                        if (messages_2_1 && !messages_2_1.done && (_a = messages_2.return)) _a.call(messages_2);
                                                    }
                                                    finally { if (e_1) throw e_1.error; }
                                                }
                                                response_1.write = function (data) {
                                                    controller.enqueue(data);
                                                };
                                            },
                                            cancel: function () {
                                                response_1.write = function () { };
                                                event.locals['_tempOnClose']();
                                            },
                                        });
                                        sseResponse_1 = new Response(stream, { headers: headers });
                                    }
                                }
                            },
                        };
                        return [4 /*yield*/, result.handle(event, response_1)];
                    case 1:
                        responseFromRemultHandler = _b.sent();
                        if (sseResponse_1 !== undefined) {
                            return [2 /*return*/, sseResponse_1];
                        }
                        if (responseFromRemultHandler) {
                            return [2 /*return*/, new Response(JSON.stringify(responseFromRemultHandler.data), {
                                    status: responseFromRemultHandler.statusCode,
                                })];
                        }
                        _b.label = 2;
                    case 2: return [2 /*return*/, new Promise(function (res) {
                            result.withRemult(event, undefined, function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                var _a;
                                return tslib_1.__generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0:
                                            _a = res;
                                            return [4 /*yield*/, resolve(event)];
                                        case 1:
                                            _a.apply(void 0, [_b.sent()]);
                                            return [2 /*return*/];
                                    }
                                });
                            }); });
                        })];
                }
            });
        });
    };
    return Object.assign(handler, {
        getRemult: function (req) { return result.getRemult(req); },
        openApiDoc: function (options) { return result.openApiDoc(options); },
        withRemult: function (request, what) {
            return result.withRemultAsync(request, what);
        },
    });
}
exports.remultSveltekit = remultSveltekit;
